/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.math.BigDecimal
import java.time.LocalDateTime
import java.time.Year

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.enums.FilmRating
import org.jooq.generated.tables.KFilm
import org.jooq.generated.tables.pojos.Film
import org.jooq.generated.tables.records.FilmRecord
import org.jooq.impl.AutoConverter
import org.jooq.impl.DAOImpl
import org.jooq.types.UByte
import org.jooq.types.UInteger
import org.jooq.types.UShort


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmDao(configuration: Configuration?) : DAOImpl<FilmRecord, Film, Long>(KFilm.FILM, Film::class.java, configuration) {

    /**
     * Create a new FilmDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Film): Long? = o.filmId

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKFilmId(lowerInclusive: Long?, upperInclusive: Long?): List<Film> = fetchRange(KFilm.FILM.FILM_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    fun fetchByKFilmId(vararg values: Long): List<Film> = fetch(KFilm.FILM.FILM_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>film_id = value</code>
     */
    fun fetchOneByKFilmId(value: Long): Film? = fetchOne(KFilm.FILM.FILM_ID, value)

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKTitle(lowerInclusive: String?, upperInclusive: String?): List<Film> = fetchRange(KFilm.FILM.TITLE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    fun fetchByKTitle(vararg values: String): List<Film> = fetch(KFilm.FILM.TITLE, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKDescription(lowerInclusive: String?, upperInclusive: String?): List<Film> = fetchRange(KFilm.FILM.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByKDescription(vararg values: String): List<Film> = fetch(KFilm.FILM.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>release_year BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKReleaseYear(lowerInclusive: Year?, upperInclusive: Year?): List<Film> = fetchRange(KFilm.FILM.RELEASE_YEAR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>release_year IN (values)</code>
     */
    fun fetchByKReleaseYear(vararg values: Year): List<Film> = fetch(KFilm.FILM.RELEASE_YEAR, *values)

    /**
     * Fetch records that have <code>language_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLanguageId(lowerInclusive: Long?, upperInclusive: Long?): List<Film> = fetchRange(KFilm.FILM.LANGUAGE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>language_id IN (values)</code>
     */
    fun fetchByKLanguageId(vararg values: Long): List<Film> = fetch(KFilm.FILM.LANGUAGE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>original_language_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfKOriginalLanguageId(lowerInclusive: Long?, upperInclusive: Long?): List<Film> = fetchRange(KFilm.FILM.ORIGINAL_LANGUAGE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>original_language_id IN (values)</code>
     */
    fun fetchByKOriginalLanguageId(vararg values: Long): List<Film> = fetch(KFilm.FILM.ORIGINAL_LANGUAGE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>rental_duration BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKRentalDuration(lowerInclusive: Int?, upperInclusive: Int?): List<Film> = fetchRange(KFilm.FILM.RENTAL_DURATION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_duration IN (values)</code>
     */
    fun fetchByKRentalDuration(vararg values: Int): List<Film> = fetch(KFilm.FILM.RENTAL_DURATION, *values.toTypedArray())

    /**
     * Fetch records that have <code>rental_rate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKRentalRate(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<Film> = fetchRange(KFilm.FILM.RENTAL_RATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_rate IN (values)</code>
     */
    fun fetchByKRentalRate(vararg values: BigDecimal): List<Film> = fetch(KFilm.FILM.RENTAL_RATE, *values)

    /**
     * Fetch records that have <code>length BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLength(lowerInclusive: Int?, upperInclusive: Int?): List<Film> = fetchRange(KFilm.FILM.LENGTH, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>length IN (values)</code>
     */
    fun fetchByKLength(vararg values: Int): List<Film> = fetch(KFilm.FILM.LENGTH, *values.toTypedArray())

    /**
     * Fetch records that have <code>replacement_cost BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKReplacementCost(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<Film> = fetchRange(KFilm.FILM.REPLACEMENT_COST, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>replacement_cost IN (values)</code>
     */
    fun fetchByKReplacementCost(vararg values: BigDecimal): List<Film> = fetch(KFilm.FILM.REPLACEMENT_COST, *values)

    /**
     * Fetch records that have <code>rating BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKRating(lowerInclusive: FilmRating?, upperInclusive: FilmRating?): List<Film> = fetchRange(KFilm.FILM.RATING, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rating IN (values)</code>
     */
    fun fetchByKRating(vararg values: FilmRating): List<Film> = fetch(KFilm.FILM.RATING, *values)

    /**
     * Fetch records that have <code>special_features BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKSpecialFeatures(lowerInclusive: String?, upperInclusive: String?): List<Film> = fetchRange(KFilm.FILM.SPECIAL_FEATURES, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>special_features IN (values)</code>
     */
    fun fetchByKSpecialFeatures(vararg values: String): List<Film> = fetch(KFilm.FILM.SPECIAL_FEATURES, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Film> = fetchRange(KFilm.FILM.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByKLastUpdate(vararg values: LocalDateTime): List<Film> = fetch(KFilm.FILM.LAST_UPDATE, *values)
}
