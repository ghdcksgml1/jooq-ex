/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.KStore
import org.jooq.generated.tables.pojos.Store
import org.jooq.generated.tables.records.StoreRecord
import org.jooq.impl.AutoConverter
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StoreDao(configuration: Configuration?) : DAOImpl<StoreRecord, Store, Long>(KStore.STORE, Store::class.java, configuration) {

    /**
     * Create a new StoreDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Store): Long? = o.storeId

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKStoreId(lowerInclusive: Long?, upperInclusive: Long?): List<Store> = fetchRange(KStore.STORE.STORE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    fun fetchByKStoreId(vararg values: Long): List<Store> = fetch(KStore.STORE.STORE_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>store_id = value</code>
     */
    fun fetchOneByKStoreId(value: Long): Store? = fetchOne(KStore.STORE.STORE_ID, value)

    /**
     * Fetch records that have <code>manager_staff_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKManagerStaffId(lowerInclusive: Long?, upperInclusive: Long?): List<Store> = fetchRange(KStore.STORE.MANAGER_STAFF_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>manager_staff_id IN (values)</code>
     */
    fun fetchByKManagerStaffId(vararg values: Long): List<Store> = fetch(KStore.STORE.MANAGER_STAFF_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>manager_staff_id = value</code>
     */
    fun fetchOneByKManagerStaffId(value: Long): Store? = fetchOne(KStore.STORE.MANAGER_STAFF_ID, value)

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKAddressId(lowerInclusive: Long?, upperInclusive: Long?): List<Store> = fetchRange(KStore.STORE.ADDRESS_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    fun fetchByKAddressId(vararg values: Long): List<Store> = fetch(KStore.STORE.ADDRESS_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Store> = fetchRange(KStore.STORE.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByKLastUpdate(vararg values: LocalDateTime): List<Store> = fetch(KStore.STORE.LAST_UPDATE, *values)
}
