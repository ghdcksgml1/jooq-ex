/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.KStaff
import org.jooq.generated.tables.pojos.Staff
import org.jooq.generated.tables.records.StaffRecord
import org.jooq.impl.AutoConverter
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StaffDao(configuration: Configuration?) : DAOImpl<StaffRecord, Staff, Long>(KStaff.STAFF, Staff::class.java, configuration) {

    /**
     * Create a new StaffDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Staff): Long? = o.staffId

    /**
     * Fetch records that have <code>staff_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKStaffId(lowerInclusive: Long?, upperInclusive: Long?): List<Staff> = fetchRange(KStaff.STAFF.STAFF_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>staff_id IN (values)</code>
     */
    fun fetchByKStaffId(vararg values: Long): List<Staff> = fetch(KStaff.STAFF.STAFF_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>staff_id = value</code>
     */
    fun fetchOneByKStaffId(value: Long): Staff? = fetchOne(KStaff.STAFF.STAFF_ID, value)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKFirstName(lowerInclusive: String?, upperInclusive: String?): List<Staff> = fetchRange(KStaff.STAFF.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByKFirstName(vararg values: String): List<Staff> = fetch(KStaff.STAFF.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLastName(lowerInclusive: String?, upperInclusive: String?): List<Staff> = fetchRange(KStaff.STAFF.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByKLastName(vararg values: String): List<Staff> = fetch(KStaff.STAFF.LAST_NAME, *values)

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKAddressId(lowerInclusive: Long?, upperInclusive: Long?): List<Staff> = fetchRange(KStaff.STAFF.ADDRESS_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    fun fetchByKAddressId(vararg values: Long): List<Staff> = fetch(KStaff.STAFF.ADDRESS_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>picture BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKPicture(lowerInclusive: ByteArray?, upperInclusive: ByteArray?): List<Staff> = fetchRange(KStaff.STAFF.PICTURE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>picture IN (values)</code>
     */
    fun fetchByKPicture(vararg values: ByteArray): List<Staff> = fetch(KStaff.STAFF.PICTURE, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKEmail(lowerInclusive: String?, upperInclusive: String?): List<Staff> = fetchRange(KStaff.STAFF.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByKEmail(vararg values: String): List<Staff> = fetch(KStaff.STAFF.EMAIL, *values)

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKStoreId(lowerInclusive: Long?, upperInclusive: Long?): List<Staff> = fetchRange(KStaff.STAFF.STORE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    fun fetchByKStoreId(vararg values: Long): List<Staff> = fetch(KStaff.STAFF.STORE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>active BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKActive(lowerInclusive: Byte?, upperInclusive: Byte?): List<Staff> = fetchRange(KStaff.STAFF.ACTIVE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>active IN (values)</code>
     */
    fun fetchByKActive(vararg values: Byte): List<Staff> = fetch(KStaff.STAFF.ACTIVE, *values.toTypedArray())

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKUsername(lowerInclusive: String?, upperInclusive: String?): List<Staff> = fetchRange(KStaff.STAFF.USERNAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    fun fetchByKUsername(vararg values: String): List<Staff> = fetch(KStaff.STAFF.USERNAME, *values)

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKPassword(lowerInclusive: String?, upperInclusive: String?): List<Staff> = fetchRange(KStaff.STAFF.PASSWORD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    fun fetchByKPassword(vararg values: String): List<Staff> = fetch(KStaff.STAFF.PASSWORD, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Staff> = fetchRange(KStaff.STAFF.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByKLastUpdate(vararg values: LocalDateTime): List<Staff> = fetch(KStaff.STAFF.LAST_UPDATE, *values)
}
