/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.KCategory
import org.jooq.generated.tables.pojos.Category
import org.jooq.generated.tables.records.CategoryRecord
import org.jooq.impl.AutoConverter
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CategoryDao(configuration: Configuration?) : DAOImpl<CategoryRecord, Category, Long>(KCategory.CATEGORY, Category::class.java, configuration) {

    /**
     * Create a new CategoryDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Category): Long? = o.categoryId

    /**
     * Fetch records that have <code>category_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKCategoryId(lowerInclusive: Long?, upperInclusive: Long?): List<Category> = fetchRange(KCategory.CATEGORY.CATEGORY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>category_id IN (values)</code>
     */
    fun fetchByKCategoryId(vararg values: Long): List<Category> = fetch(KCategory.CATEGORY.CATEGORY_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>category_id = value</code>
     */
    fun fetchOneByKCategoryId(value: Long): Category? = fetchOne(KCategory.CATEGORY.CATEGORY_ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKName(lowerInclusive: String?, upperInclusive: String?): List<Category> = fetchRange(KCategory.CATEGORY.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByKName(vararg values: String): List<Category> = fetch(KCategory.CATEGORY.NAME, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Category> = fetchRange(KCategory.CATEGORY.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByKLastUpdate(vararg values: LocalDateTime): List<Category> = fetch(KCategory.CATEGORY.LAST_UPDATE, *values)
}
