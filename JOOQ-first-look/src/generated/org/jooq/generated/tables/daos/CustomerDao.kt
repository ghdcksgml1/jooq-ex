/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.KCustomer
import org.jooq.generated.tables.pojos.Customer
import org.jooq.generated.tables.records.CustomerRecord
import org.jooq.impl.AutoConverter
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CustomerDao(configuration: Configuration?) : DAOImpl<CustomerRecord, Customer, Long>(KCustomer.CUSTOMER, Customer::class.java, configuration) {

    /**
     * Create a new CustomerDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Customer): Long? = o.customerId

    /**
     * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKCustomerId(lowerInclusive: Long?, upperInclusive: Long?): List<Customer> = fetchRange(KCustomer.CUSTOMER.CUSTOMER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_id IN (values)</code>
     */
    fun fetchByKCustomerId(vararg values: Long): List<Customer> = fetch(KCustomer.CUSTOMER.CUSTOMER_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>customer_id = value</code>
     */
    fun fetchOneByKCustomerId(value: Long): Customer? = fetchOne(KCustomer.CUSTOMER.CUSTOMER_ID, value)

    /**
     * Fetch records that have <code>store_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKStoreId(lowerInclusive: Long?, upperInclusive: Long?): List<Customer> = fetchRange(KCustomer.CUSTOMER.STORE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>store_id IN (values)</code>
     */
    fun fetchByKStoreId(vararg values: Long): List<Customer> = fetch(KCustomer.CUSTOMER.STORE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKFirstName(lowerInclusive: String?, upperInclusive: String?): List<Customer> = fetchRange(KCustomer.CUSTOMER.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByKFirstName(vararg values: String): List<Customer> = fetch(KCustomer.CUSTOMER.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLastName(lowerInclusive: String?, upperInclusive: String?): List<Customer> = fetchRange(KCustomer.CUSTOMER.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByKLastName(vararg values: String): List<Customer> = fetch(KCustomer.CUSTOMER.LAST_NAME, *values)

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKEmail(lowerInclusive: String?, upperInclusive: String?): List<Customer> = fetchRange(KCustomer.CUSTOMER.EMAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    fun fetchByKEmail(vararg values: String): List<Customer> = fetch(KCustomer.CUSTOMER.EMAIL, *values)

    /**
     * Fetch records that have <code>address_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKAddressId(lowerInclusive: Long?, upperInclusive: Long?): List<Customer> = fetchRange(KCustomer.CUSTOMER.ADDRESS_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address_id IN (values)</code>
     */
    fun fetchByKAddressId(vararg values: Long): List<Customer> = fetch(KCustomer.CUSTOMER.ADDRESS_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>active BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKActive(lowerInclusive: Byte?, upperInclusive: Byte?): List<Customer> = fetchRange(KCustomer.CUSTOMER.ACTIVE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>active IN (values)</code>
     */
    fun fetchByKActive(vararg values: Byte): List<Customer> = fetch(KCustomer.CUSTOMER.ACTIVE, *values.toTypedArray())

    /**
     * Fetch records that have <code>create_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKCreateDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Customer> = fetchRange(KCustomer.CUSTOMER.CREATE_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>create_date IN (values)</code>
     */
    fun fetchByKCreateDate(vararg values: LocalDateTime): List<Customer> = fetch(KCustomer.CUSTOMER.CREATE_DATE, *values)

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Customer> = fetchRange(KCustomer.CUSTOMER.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByKLastUpdate(vararg values: LocalDateTime): List<Customer> = fetch(KCustomer.CUSTOMER.LAST_UPDATE, *values)
}
