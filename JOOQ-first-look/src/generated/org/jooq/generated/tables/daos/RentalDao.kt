/*
 * This file is generated by jOOQ.
 */
package org.jooq.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.generated.tables.KRental
import org.jooq.generated.tables.pojos.Rental
import org.jooq.generated.tables.records.RentalRecord
import org.jooq.impl.AutoConverter
import org.jooq.impl.DAOImpl
import org.jooq.types.UInteger


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RentalDao(configuration: Configuration?) : DAOImpl<RentalRecord, Rental, Int>(KRental.RENTAL, Rental::class.java, configuration) {

    /**
     * Create a new RentalDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Rental): Int? = o.rentalId

    /**
     * Fetch records that have <code>rental_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKRentalId(lowerInclusive: Int?, upperInclusive: Int?): List<Rental> = fetchRange(KRental.RENTAL.RENTAL_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_id IN (values)</code>
     */
    fun fetchByKRentalId(vararg values: Int): List<Rental> = fetch(KRental.RENTAL.RENTAL_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>rental_id = value</code>
     */
    fun fetchOneByKRentalId(value: Int): Rental? = fetchOne(KRental.RENTAL.RENTAL_ID, value)

    /**
     * Fetch records that have <code>rental_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKRentalDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Rental> = fetchRange(KRental.RENTAL.RENTAL_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>rental_date IN (values)</code>
     */
    fun fetchByKRentalDate(vararg values: LocalDateTime): List<Rental> = fetch(KRental.RENTAL.RENTAL_DATE, *values)

    /**
     * Fetch records that have <code>inventory_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKInventoryId(lowerInclusive: Long?, upperInclusive: Long?): List<Rental> = fetchRange(KRental.RENTAL.INVENTORY_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>inventory_id IN (values)</code>
     */
    fun fetchByKInventoryId(vararg values: Long): List<Rental> = fetch(KRental.RENTAL.INVENTORY_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>customer_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKCustomerId(lowerInclusive: Long?, upperInclusive: Long?): List<Rental> = fetchRange(KRental.RENTAL.CUSTOMER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>customer_id IN (values)</code>
     */
    fun fetchByKCustomerId(vararg values: Long): List<Rental> = fetch(KRental.RENTAL.CUSTOMER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>return_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKReturnDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Rental> = fetchRange(KRental.RENTAL.RETURN_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>return_date IN (values)</code>
     */
    fun fetchByKReturnDate(vararg values: LocalDateTime): List<Rental> = fetch(KRental.RENTAL.RETURN_DATE, *values)

    /**
     * Fetch records that have <code>staff_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKStaffId(lowerInclusive: Long?, upperInclusive: Long?): List<Rental> = fetchRange(KRental.RENTAL.STAFF_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>staff_id IN (values)</code>
     */
    fun fetchByKStaffId(vararg values: Long): List<Rental> = fetch(KRental.RENTAL.STAFF_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfKLastUpdate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<Rental> = fetchRange(KRental.RENTAL.LAST_UPDATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    fun fetchByKLastUpdate(vararg values: LocalDateTime): List<Rental> = fetch(KRental.RENTAL.LAST_UPDATE, *values)
}
